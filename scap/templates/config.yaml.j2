# Number of worker processes to spawn.
# Set to 0 to run everything in a single process without clustering.
# Use 'ncpu' to run as many workers as there are CPU units
num_workers: <%= num_workers %>

# Log error messages and gracefully restart a worker if v8 reports that it
# uses more heap (note: not RSS) than this many mb.
worker_heap_limit_mb: <%= worker_heap_limit_mb %>

# The maximum interval in ms that can pass between two beat messages
# sent by each worker to the master before it is killed
worker_heartbeat_timeout: <%= worker_heartbeat_timeout %>

# Logger info
logging:
  level: warn
  name: <%= log_name %>
  streams:
    - host: <%= logstash_host %>
      port: <%= logstash_port %>
      type: gelf
    - level: info
      path: <%= log_file %>
      type: file

# Statsd metrics reporter
metrics:
  name: <%= metrics_name %>
  host: <%= metrics_host %>
  port: <%= metrics_port %>
  type: statsd

services:
  - name: <%= name %>
    # a relative path or the name of an npm package, if different from name
    module: ./src/app.js
    # per-service config
    conf:
      port: <%= port %>
      # interface: localhost # uncomment to only listen on localhost
      # more per-service config settings
      # the location of the spec, defaults to spec.yaml if not specified
      # spec: ./spec.template.yaml
      # allow cross-domain requests to the API (default '*')
      cors: '*'
      # to disable use:
      # cors: false
      # to restrict to a particular domain, use:
      # cors: restricted.domain.org
      # content for the CSP headers
      # csp: false  # uncomment this line to disable sending them
      # URL of the outbound proxy to use (complete with protocol)
      # proxy: <%= proxy if proxy else '' %>
      # the list of domains for which not to use the proxy defined above
      # no_proxy_list:
      #   - domain1.com
      #   - domain2.org
      # the list of incoming request headers that can be logged; if left empty,
      # the following headers are allowed: cache-control, content-length,
      # content-type, if-match, user-agent, x-request-id
      # log_header_whitelist:
      #   - cache-control
      #   - content-length
      #   - content-type
      #   - if-match
      #   - user-agent
      #   - x-request-id
      # User-Agent HTTP header to use for requests
      user_agent: "Recommendation API (Wikimedia tool; learn more at https://meta.wikimedia.org/wiki/Recommendation_API)"
      mwapi_req:
        method: post
        uri: <%= mwapi_uri %>
        headers:
          host: '{{request.params.domain}}'
          user-agent: '{{user-agent}}'
        body: '{{ default(request.query, {}) }}'
      # the template used for contacting RESTBase
      restbase_req:
        method: '{{request.method}}'
        uri: <%= restbase_uri %>
        query: '{{ default(request.query, {}) }}'
        headers: '{{request.headers}}'
        body: '{{request.body}}'
      mysql_conn:
        limit: 2
        host: <%= dbhost %>
        name: <%= dbname %>
        user: <%= dbuser %>
        pass: <%= dbpass %>
        # If a connection to MySQL fails, how many times to retry?
        retry: 2
        # retry delay (in ms) before connecting to MySQL
        retry_delay: 1000
      wikidata_domain: <%= wikidata_domain %>
      mysql_tables:
        language: language_20181130
        normalized_rank: normalized_rank_20181130
      wdqsapi_req:
        method: 'post'
        uri: <%= wdqs_uri %>/sparql
        headers:
          user-agent: '{{user-agent}}'
        body:
          format: 'json'
          query: '{{request.query}}'
      queries:
        pageviews:
          domain: '{{params.source}}.wikipedia.org'
          parameters:
            format: json
            action: query
            prop: pageprops
            ppprop: wikibase_item
            generator: mostviewed
            gpvimlimit: 500
        seed:
          domain: '{{params.source}}.wikipedia.org'
          parameters:
            format: json
            action: query
            prop: pageprops
            ppprop: wikibase_item
            generator: search
            gsrlimit: 500
            gsrsearch: morelike:{{params.seed}}
            gsrprop: ''
        article:
          domain: '{{params.source}}.wikipedia.org'
          parameters:
            format: json
            action: query
            prop: pageprops
            ppprop: wikibase_item
            generator: search
            gsrlimit: 1
            gsrsearch: '{{params.seed}}'
            gsrprop: ''
        wikidata:
          domain: '{{params.domain}}'
          parameters:
            format: json
            formatversion: 2
            action: query
            prop: pageprops
            ppprop: wikibase_item
            titles: '{{params.title}}'
      article:
        # key is the target language, values are source languages
        translation_models:
          en:
            - de
          es:
            - en
          fa:
            - en
          uz:
            - en
            - ru

